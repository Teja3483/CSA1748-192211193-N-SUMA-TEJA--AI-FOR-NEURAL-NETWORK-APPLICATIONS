import heapq


class Node:
    def __init__(self, name, parent=None, g=0, h=0):
        self.name = name  # Node name
        self.parent = parent  # Parent node
        self.g = g  # Cost from start to this node
        self.h = h  # Heuristic cost to goal
        self.f = g + h  # Total cost

    def __lt__(self, other):
        return self.f < other.f  # Compare nodes based on f value


def heuristic(node, goal):
    """Calculate the heuristic (Manhattan distance)."""
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])


def a_star(start, goal, graph):
    """Implement the A* algorithm."""
    open_list = []
    closed_list = set()

    start_node = Node(start, None, 0, heuristic(start, goal))
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.name == goal:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        closed_list.add(current_node.name)

        for neighbor in graph[current_node.name]:
            if neighbor in closed_list:
                continue

            g_cost = current_node.g + 1  # Assuming cost to move to neighbor is 1
            h_cost = heuristic(neighbor, goal)
            neighbor_node = Node(neighbor, current_node, g_cost, h_cost)

            if any(n.name == neighbor_node.name and n.g <= neighbor_node.g for n in open_list):
                continue

            heapq.heappush(open_list, neighbor_node)

    return None  # No path found


# Example usage
if __name__ == "__main__":
    # Take input from the user
    num_nodes = int(input("Enter the number of nodes: "))

    graph = {}

    print("Enter the connections between nodes (format: (x1 y1) (x2 y2)). Type 'done' when finished:")
    while True:
        connection = input()
        if connection.lower() == 'done':
            break
        u, v = connection.strip('()').split(') (')
        u = tuple(map(int, u.split()))
        v = tuple(map(int, v.split()))
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)  # For undirected graph

    start = tuple(map(int, input("Enter the starting node (format: x y): ").split()))
    goal = tuple(map(int, input("Enter the goal node (format: x y): ").split()))

    path = a_star(start, goal, graph)

    if path:
        print("Path found:", path)
    else:
        print("No path found.")
