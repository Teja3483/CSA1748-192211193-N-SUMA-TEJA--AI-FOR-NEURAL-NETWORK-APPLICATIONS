from collections import deque

def water_jug_problem(capacity_a, capacity_b, target):
    """Solves the Water Jug Problem using BFS."""
    # Initialize the queue for BFS and visited set
    queue = deque()
    visited = set()

    # Initial state (0, 0) - both jugs are empty
    initial_state = (0, 0)
    queue.append((initial_state, []))  # (state, path)
    visited.add(initial_state)

    while queue:
        (current_a, current_b), path = queue.popleft()

        # Check if we have reached the target
        if current_a == target or current_b == target:
            return path + [(current_a, current_b)]

        # Possible actions
        actions = [
            (capacity_a, current_b),  # Fill Jug A
            (current_a, capacity_b),  # Fill Jug B
            (0, current_b),           # Empty Jug A
            (current_a, 0),           # Empty Jug B
            (max(0, current_a - (capacity_b - current_b)), current_b + min(current_a, capacity_b - current_b)),  # Pour A to B
            (current_a + min(current_b, capacity_a - current_a), max(0, current_b - (capacity_a - current_a)))  # Pour B to A
        ]

        for new_state in actions:
            if new_state not in visited:
                visited.add(new_state)
                queue.append((new_state, path + [(current_a, current_b)]))

    return None  # No solution found

# Example usage
if __name__ == "__main__":
    capacity_a = 4  # Capacity of Jug A
    capacity_b = 3  # Capacity of Jug B
    target = 2      # Target amount of water

    result = water_jug_problem(capacity_a, capacity_b, target)

    if result:
        print("Steps to reach the target:")
        for step in result:
            print(step)
    else:
        print("No solution found.")
