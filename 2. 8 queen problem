def print_board(board):
    """Function to print the chessboard."""
    for row in board:
        print(" ".join(row))
    print()

def is_safe(board, row, col):
    """Check if it's safe to place a queen at board[row][col]."""
    # Check this column on upper side
    for i in range(row):
        if board[i][col] == 'Q':
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if j < 0:  # Prevent index out of range
            break
        if board[i][j] == 'Q':
            return False

    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if j >= len(board):  # Prevent index out of range
            break
        if board[i][j] == 'Q':
            return False

    return True

def solve_n_queens_util(board, row):
    """Utilize backtracking to solve the N-Queens problem."""
    if row >= len(board):
        print_board(board)
        return

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = 'Q'  # Place queen
            solve_n_queens_util(board, row + 1)  # Recur to place the next queen
            board[row][col] = '.'  # Backtrack

def solve_n_queens(n):
    """Main function to solve the N-Queens problem."""
    board = [['.' for _ in range(n)] for _ in range(n)]  # Create an n x n chessboard
    solve_n_queens_util(board, 0)

# Example usage
n = 8
solve_n_queens(n)
