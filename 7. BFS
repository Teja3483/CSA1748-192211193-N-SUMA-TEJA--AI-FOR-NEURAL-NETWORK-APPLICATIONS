from collections import deque

class Graph:
    def __init__(self):
        self.graph = {}  # Dictionary to hold the graph

    def add_edge(self, u, v):
        """Add an edge to the graph."""
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)  # For undirected graph

    def bfs(self, start):
        """Perform BFS starting from the given node."""
        visited = set()  # Set to keep track of visited nodes
        queue = deque([start])  # Queue for BFS

        while queue:
            node = queue.popleft()  # Dequeue a vertex from the queue
            if node not in visited:
                print(node, end=" ")  # Process the node
                visited.add(node)  # Mark the node as visited

                # Enqueue all unvisited adjacent nodes
                for neighbor in self.graph.get(node, []):
                    if neighbor not in visited:
                        queue.append(neighbor)

# Example usage
if __name__ == "__main__":
    g = Graph()
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 3)
    g.add_edge(1, 4)
    g.add_edge(2, 5)
    g.add_edge(3, 6)
    g.add_edge(4, 6)
    g.add_edge(5, 6)

    print("BFS traversal starting from node 0:")
    g.bfs(0)
